gcp_credentials: ENCRYPTED[!149d4005ecdba4cdd78bb5ba22756ebb98bf8e3367ee2e9ab08c5a1608c0d3e3b501904b67a1d67c0b63085e469d7dde!]
 
env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  CIRRUS_CLONE_DEPTH: 20
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # burgr notification
  BURGR_URL: VAULT[development/kv/data/burgr data.url]
  BURGR_USERNAME: VAULT[development/kv/data/burgr data.cirrus_username]
  BURGR_PASSWORD: VAULT[development/kv/data/burgr data.cirrus_password]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  image: eu.gcr.io/release-engineering-ci-prod/base:j11-latest
  cluster_name: cirrus-ci
  zone: europe-west4-b
  namespace: default

win_vm_definition: &WINDOWS_VM_DEFINITION
  gce_instance:
    image_project: release-engineering-ci-prod
    image_family: lt-base-windows-jdk11
    platform: windows
    zone: europe-west4-b
    preemptible: false
    disk: 80
    type: n1-standard-4

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

build_task:
  gke_container:
    dockerfile: .cirrus/nodejs-10.Dockerfile
    builder_image_project: release-engineering-ci-prod
    builder_image_name: family/docker-builder
    cluster_name: cirrus-ci
    zone: europe-west4-b
    namespace: default
    cpu: 2
    memory: 2G

  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    #sign artifacts
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - source cirrus-env BUILD
    - regular_mvn_build_deploy_analyze
  cleanup_before_cache_script: cleanup_maven_repository

ws_scan_task:
  depends_on:
    - build
  gke_container:
    dockerfile: .cirrus/nodejs-10.Dockerfile
    builder_image_project: release-engineering-ci-prod
    builder_image_name: family/docker-builder
    cluster_name: cirrus-ci
    zone: europe-west4-b
    namespace: default
    cpu: 2
    memory: 2G
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  whitesource_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

build_win_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  maven_cache:
    #windows cache fails with ${CIRRUS_WORKING_DIR}
    folder: ~/.m2/repository
  build_script:
    - source cirrus-env CI
    - mvn test
  cleanup_before_cache_script: cleanup_maven_repository

plugin_qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    dockerfile: .cirrus/nodejs-10.Dockerfile
    builder_image_project: release-engineering-ci-prod
    builder_image_name: family/docker-builder
    cluster_name: cirrus-ci
    zone: europe-west4-b
    namespace: default
    cpu: 3
    memory: 8G
  env:
    matrix:
      - SQ_VERSION: LATEST_RELEASE[8.9]
      - SQ_VERSION: DEV
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -f its/plugin verify -Dsonar.runtimeVersion=${SQ_VERSION} -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository
 
plugin_qa_win_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *WINDOWS_VM_DEFINITION
  env:
    - SQ_VERSION: LATEST_RELEASE[8.9]
  maven_cache:
    #windows cache fails with ${CIRRUS_WORKING_DIR}
    folder: ~/.m2/repository
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -f its/plugin verify -Dsonar.runtimeVersion=${SQ_VERSION} -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

ruling_task:
  depends_on:
    - build
  only_if: $CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*"
  gke_container:
    dockerfile: .cirrus/nodejs-10.Dockerfile
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 8G
  env:
    SONARSOURCE_QA: true
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

promote_task:
  depends_on:
    - build
    - build_win
    - plugin_qa
    - plugin_qa_win
    - ruling
  <<: *ONLY_SONARSOURCE_QA
  gke_container:
    <<: *CONTAINER_DEFINITION
    cpu: 0.5
    memory: 500M
  env:
    #promotion cloud function
    GCF_ACCESS_TOKEN: VAULT[development/kv/data/promote data.token]
    PROMOTE_URL: VAULT[development/kv/data/promote data.url]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
    #artifacts that will have downloadable links in burgr
    ARTIFACTS: org.sonarsource.css:sonar-css-plugin:jar
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
